---
- name: Setup HashiCorp Vault with HTTPS
  hosts: vault_servers
  become: yes
  vars:
    vault_version_var: "{{ vault_version | default('1.15.6') }}"
    vault_domain_var: "{{ vault_domain | default('vault.example.com') }}"
    # Support both JWT and root token authentication
    use_jwt_auth: "{{ vault_use_jwt_auth | default(false) }}"
    vault_jwt_role: "{{ vault_jwt_role | default('tf-github-actions-role-apply-dev') }}"
    vault_root_token_var: "{{ vault_root_token | default('vault-dev-root-token') }}"
    
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
        
    - name: Install required packages
      apt:
        name:
          - unzip
          - curl
          - jq
          - snapd
          - nginx
        state: present
        
    - name: Create vault user
      user:
        name: vault
        system: yes
        home: /etc/vault
        shell: /bin/false
        create_home: no
        
    - name: Create vault directories
      file:
        path: "{{ item }}"
        state: directory
        owner: vault
        group: vault
        mode: '0755'
      loop:
        - /opt/vault/data
        - /etc/vault/tls
        - /var/log/vault
        
    - name: Set proper permissions for audit log directory
      file:
        path: /var/log/vault
        state: directory
        owner: vault
        group: vault
        mode: '0750'  # More restrictive for audit logs
        
    - name: Create audit log file with proper permissions
      file:
        path: /var/log/vault/audit.log
        state: touch
        owner: vault
        group: vault
        mode: '0640'  # Read-write for vault, read for group
        
    - name: Download and install Vault binary
      block:
        - name: Download Vault
          get_url:
            url: "https://releases.hashicorp.com/vault/{{ vault_version_var }}/vault_{{ vault_version_var }}_linux_amd64.zip"
            dest: /tmp/vault.zip
            mode: '0644'
            
        - name: Extract Vault binary
          unarchive:
            src: /tmp/vault.zip
            dest: /tmp/
            remote_src: yes
            
        - name: Install Vault binary
          copy:
            src: /tmp/vault
            dest: /usr/local/bin/vault
            mode: '0755'
            owner: root
            group: root
            remote_src: yes
            
        - name: Clean up download
          file:
            path: /tmp/vault.zip
            state: absent
            
    - name: Create Vault systemd service
      copy:
        dest: /etc/systemd/system/vault.service
        content: |
          [Unit]
          Description=HashiCorp Vault (Development Mode)
          After=network-online.target
          
          [Service]
          Type=simple
          User=vault
          Group=vault
          ExecStart=/usr/local/bin/vault server -dev -dev-listen-address=127.0.0.1:8200 -dev-root-token-id={{ vault_root_token_var }}
          Restart=on-failure
          LimitNOFILE=65536
          LimitMEMLOCK=infinity
          
          [Install]
          WantedBy=multi-user.target
        mode: '0644'
        
    - name: Start and enable Vault service
      systemd:
        name: vault
        daemon_reload: yes
        enabled: yes
        state: started
        
    - name: Install Certbot via snap
      block:
        - name: Install core snap
          snap:
            name: core
            
        - name: Refresh core snap
          command: snap refresh core
          
        - name: Install certbot snap
          snap:
            name: certbot
            classic: yes
            
        - name: Create certbot symlink
          file:
            src: /snap/bin/certbot
            dest: /usr/bin/certbot
            state: link
            
    - name: Configure NGINX for HTTP only (pre-certificate)
      copy:
        dest: /etc/nginx/sites-available/vault
        content: |
          server {
              listen 80;
              server_name {{ vault_domain_var }};
              
              # Let's Encrypt challenge
              location /.well-known/acme-challenge/ { 
                  root /var/www/html; 
              }
              
              # Proxy to Vault for now
              location / {
                  proxy_pass http://127.0.0.1:8200;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
              }
          }
        mode: '0644'
        
    - name: Enable NGINX site
      file:
        src: /etc/nginx/sites-available/vault
        dest: /etc/nginx/sites-enabled/vault
        state: link
        
    - name: Remove default NGINX site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
        
    - name: Test NGINX configuration
      command: nginx -t
      
    - name: Start and enable NGINX
      systemd:
        name: nginx
        enabled: yes
        state: started
        
    - name: Create webroot directory
      file:
        path: /var/www/html
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'
        
    - name: Obtain Let's Encrypt certificate
      command: >
        certbot certonly --webroot --webroot-path /var/www/html
        --email admin@{{ vault_domain_var }} --agree-tos --no-eff-email
        --domains {{ vault_domain_var }} --non-interactive
      register: certbot_result
      failed_when: false
      
    - name: Configure NGINX with SSL certificate
      block:
        - name: Apply SSL configuration to NGINX
          command: certbot --nginx --domains {{ vault_domain_var }} --non-interactive
          
        - name: Setup automatic certificate renewal
          cron:
            name: "Certbot renewal"
            minute: "0"
            hour: "12"
            job: "/usr/bin/certbot renew --quiet && systemctl reload nginx"
            
        - name: Reload NGINX with SSL configuration
          systemd:
            name: nginx
            state: reloaded
            
      when: certbot_result.rc == 0
      
    - name: Wait for Vault to be ready
      uri:
        url: "http://127.0.0.1:8200/v1/sys/health"
        method: GET
        status_code: [200, 429]  # 200=unsealed, 429=sealed but ok
      retries: 30
      delay: 2
      register: vault_health_check
      
    - name: Configure audit logging via API (when using JWT auth)
      block:
        - name: Authenticate with Vault using JWT
          uri:
            url: "http://127.0.0.1:8200/v1/auth/jwt/login/{{ vault_jwt_role }}"
            method: POST
            body_format: json
            body:
              jwt: "{{ lookup('env', 'GITHUB_TOKEN') | default(lookup('env', 'ACTIONS_ID_TOKEN')) }}"
            status_code: 200
          register: vault_jwt_auth_result
          when: use_jwt_auth and lookup('env', 'GITHUB_TOKEN', default=lookup('env', 'ACTIONS_ID_TOKEN', default='')) != ''
          
        - name: Enable audit logging using JWT token
          uri:
            url: "http://127.0.0.1:8200/v1/sys/audit/file_audit_ansible"
            method: PUT
            headers:
              X-Vault-Token: "{{ vault_jwt_auth_result.json.auth.client_token }}"
            body_format: json
            body:
              type: "file"
              options:
                file_path: "/var/log/vault/audit.log"
                format: "json"
                prefix: "vault_audit_ansible"
            status_code: [200, 204]
          when: use_jwt_auth and vault_jwt_auth_result is defined and vault_jwt_auth_result.json is defined
          
      rescue:
        - name: JWT authentication failed, continuing with existing setup
          debug:
            msg: "JWT authentication failed or not configured, audit logging will be handled by Terraform"
      when: use_jwt_auth

    - name: Display setup results
      debug:
        msg: |
          ===================================
          Vault Setup Complete!
          ===================================
          {% if certbot_result.rc == 0 %}
          ‚úÖ HTTPS URL: https://{{ vault_domain_var }}
          ‚úÖ Let's Encrypt certificate obtained
          ‚úÖ Automatic renewal configured
          {% else %}
          ‚ö†Ô∏è  Certificate failed, using HTTP fallback
          üîó HTTP URL: http://{{ vault_domain_var }}:8200
          {% endif %}
          {% if use_jwt_auth %}
          üîê Authentication: JWT (GitHub Actions OIDC)
          üé≠ JWT Role: {{ vault_jwt_role }}
          {% else %}
          üîë Root Token: {{ vault_root_token_var }}
          {% endif %}
          üîß SSH: ssh -i ../vault-ssh-key.pem ubuntu@{{ ansible_host }}
          ===================================