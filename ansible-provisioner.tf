# =============================================================================
# ANSIBLE PROVISIONER
# =============================================================================
# Automatically run Ansible playbook after EC2 instance is created and ready
# This integrates Vault setup automation directly into the Terraform workflow

# Ansible provisioner that runs after EC2 instance is created
resource "null_resource" "ansible_provisioner" {
  # Trigger re-provisioning if any of these change
  triggers = {
    instance_id     = aws_instance.vault.id
    instance_ip     = aws_instance.vault.public_ip
    vault_domain    = var.vault_domain
    ansible_playbook_hash = filemd5("${path.module}/ansible/vault-setup.yml")
  }

  # Wait for SSH to be ready before running Ansible
  provisioner "remote-exec" {
    inline = ["echo 'SSH connection established, instance ready for Ansible'"]
    
    connection {
      type        = "ssh"
      host        = aws_instance.vault.public_ip
      user        = "ubuntu"
      private_key = tls_private_key.ssh_key.private_key_pem
      timeout     = "5m"
    }
  }

  # Run Ansible playbook to configure Vault with HTTPS
  provisioner "local-exec" {
    command = <<-EOT
      set -e
      
      echo "=== Running Ansible Vault Setup ==="
      echo "Target IP: ${aws_instance.vault.public_ip}"
      echo "Domain: ${var.vault_domain}"
      
      # Run Ansible playbook with dynamic inventory
      cd ${path.module}/ansible
      ansible-playbook -i dynamic_inventory.py vault-setup.yml
      
      echo "✅ Ansible provisioning completed successfully"
      echo "🌐 Vault URL: https://${var.vault_domain}"
      echo "🔑 Root Token: vault-dev-root-token"
    EOT
    
    # Set working directory
    working_dir = path.module
    
    # Environment variables for Ansible
    environment = {
      ANSIBLE_HOST_KEY_CHECKING = "False"
      ANSIBLE_STDOUT_CALLBACK   = "yaml"
      ANSIBLE_FORCE_COLOR       = "true"
    }
  }

  # Cleanup on destroy (optional)
  provisioner "local-exec" {
    when    = destroy
    command = "echo 'Ansible provisioner cleanup completed'"
  }

  # Dependencies - ensure these resources exist before running
  depends_on = [
    aws_instance.vault,
    aws_route53_record.vault,
    local_file.ssh_private_key
  ]
}

# Create a simple completion marker
resource "local_file" "setup_complete" {
  depends_on = [null_resource.ansible_provisioner]
  
  content = <<-EOT
# Vault Setup Complete
Deployment completed at: ${timestamp()}

## Access Information
- Vault URL: https://${var.vault_domain}
- Root Token: vault-dev-root-token
- SSH: ssh -i ./vault-ssh-key.pem ubuntu@${aws_instance.vault.public_ip}

## Security Features
- HTTPS with Let's Encrypt certificate
- Automatic certificate renewal
- NGINX reverse proxy with security headers
- Access restricted to your IP: ${var.my_ip}

## Next Steps
1. Open https://${var.vault_domain} in your browser
2. Log in with token: vault-dev-root-token
3. Start using Vault for secrets management

Generated by Terraform + Ansible automation
EOT

  filename        = "${path.module}/SETUP_COMPLETE.md"
  file_permission = "0644"
}